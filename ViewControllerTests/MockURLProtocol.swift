//
//  MockURLProtocol.swift
//  ViewControllerTests
//
//  Created by Nikola Andrijasevic on 23.5.22..

// Drugi nacin za testiranje Network request

import Foundation

@testable import CodingTaskMobile


class MockURLProtocol: URLProtocol{

    //This stores the list of URLs that are passed by the system. This array can be useful to examine the list of URLs that were accessed by our application.
    static var contactedURLs : [URL] = []
    static var callCount = 0
    static func clear() {
        callCount = 0
        contactedURLs.removeAll()
    }
    // requestHandler of closure type that will be handled by the test case to validate a request and generate mock response.
    static var requestHandler: ((URLRequest)throws-> (HTTPURLResponse,Data?))?
    override class func canInit(with request: URLRequest) -> Bool {
        // To check if this protocol can handle the given request.
        callCount += 1
        if let url = request.url{
            contactedURLs.append(url)
        }
        return true
    }
    
    override class func canonicalRequest(for request: URLRequest) -> URLRequest {
        // Here you return the canonical version of the request but most of the time you pass the orignal one.
        return request
    }
    
    //This method is called by the system after we agree to handle an URL request by returning true inside func canInit(with request: URLRequest) -> Bool. We are supposed to start processing the request and inform the client when done.
    override func startLoading() {
        // This is where you create the mock response as per your test case and send it to the URLProtocolClient.
        guard let handler = MockURLProtocol.requestHandler else {
            fatalError("Handler unavailable")
        }
        do {
            //Call requestHandler closure with the received request and capture the tuple of mocked response and data generated by the test case.
            let (response, data) = try handler(request)
            
            // 3. Call didReceive delegate method to notify client with the response.
            client?.urlProtocol(self, didReceive: response, cacheStoragePolicy: .notAllowed)
            
            if let data = data {
                // 4.Calling didLoad we send received data to the client.
                client?.urlProtocol(self, didLoad: data)
            }
            
            // 5. Call didFinishLoading delegate method to notify the client that the request has been completed successfully
            client?.urlProtocolDidFinishLoading(self)
        } catch {
            // 6. If the test case throws an error, handle it and call the didFailWithError delegate method to notify the client that something went wrong.
            client?.urlProtocol(self, didFailWithError: error)
        }
    }
    
    override func stopLoading() {
        // This is called if the request gets canceled or completed.
    }

}
